NAME := noods_libretro
BUILD := build-libretro
GIT_VERSION := $(shell git describe --abbrev=7 --always)
SRCS := src src/common src/libretro
ARGS := -Ofast -flto -std=c++11 -D__LIBRETRO__ -DVERSION=\"$(GIT_VERSION)\"

CPPFILES := $(foreach dir,$(SRCS),$(wildcard $(dir)/*.cpp))
HFILES := $(foreach dir,$(SRCS),$(wildcard $(dir)/*.h))
OFILES := $(patsubst %.cpp,$(BUILD)/%.o,$(CPPFILES))

ifeq ($(platform),)
	platform = unix
	ifeq ($(shell uname -a),)
		platform = win
	else ifneq ($(findstring Darwin,$(shell uname -a)),)
		platform = osx
	else ifneq ($(findstring MINGW,$(shell uname -a)),)
		platform = win
	endif
endif

ifneq ($(findstring win,$(platform)),)
	ARGS += -static -DWINDOWS
	TARGET := $(NAME).dll
else ifneq ($(findstring osx,$(platform)),)
	ARGS += -DMACOS
	TARGET := $(NAME).dylib

	ifeq ($(CROSS_COMPILE),1)
		ARGS += -target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
	endif
else ifneq ($(findstring ios,$(platform)),)
	TARGET := $(NAME)_ios.dylib
else ifneq ($(findstring tvos,$(platform)),)
	TARGET := $(NAME)_tvos.dylib
else
  TARGET := $(NAME).so
endif

all: $(NAME)

$(NAME): $(OFILES)
	g++ -shared -o $(TARGET) $(ARGS) $^ $(LIBS)

$(BUILD)/%.o: %.cpp $(HFILES) $(BUILD)
	g++ -c -fPIC -o $@ $(ARGS) $(INCS) $<

$(BUILD):
	for dir in $(SRCS); do mkdir -p $(BUILD)/$$dir; done

clean:
	rm -rf $(BUILD)
	rm -f $(TARGET)
